<?php

/**
* MultiVc repository object plugin
*
* @author Uwe Kohnle <kohnle@internetlehrer-gmbh.de>
* @version $Id$
*
*/
class ilMultiVcPlugin extends ilRepositoryObjectPlugin
{
    public const ID = 'xmvc';

    /** @var array<int, int[]> */
    protected static array $ref_ids = [];


    public function __construct()
    {
        global $DIC;
        $this->db = $DIC->database();
        parent::__construct($this->db, $DIC["component.repository"], self::ID);
    }

    public function getPluginName(): string
    {
        return "MultiVc";
    }

    protected function uninstallCustom(): void
    {
        global $DIC;
        $ilDB = $DIC->database();

        if ($ilDB->tableExists('rep_robj_xmvc_data')) {
            $ilDB->dropTable('rep_robj_xmvc_data');
        }
        if ($ilDB->tableExists('rep_robj_xmvc_conn')) {
            $ilDB->dropTable('rep_robj_xmvc_conn');
        }

        if ($ilDB->tableExists('rep_robj_xmvc_log_max')) {
            $ilDB->dropTable('rep_robj_xmvc_log_max');
        }
        if ($ilDB->tableExists('rep_robj_xmvc_user_log')) {
            $ilDB->dropTable('rep_robj_xmvc_user_log');
        }

        if ($ilDB->tableExists('rep_robj_xmvc_schedule')) {
            $ilDB->dropTable('rep_robj_xmvc_schedule');
        }

        if ($ilDB->tableExists('rep_robj_xmvc_session')) {
            $ilDB->dropTable('rep_robj_xmvc_session');
        }

    }

    /**
     * @inheritdoc
     */
    public function allowCopy(): bool
    {
        return true;
    }

    public function handleEvent(string $a_component, string $a_event, array $a_parameter): void
    {
        global $DIC;

        $logger = $DIC->logger()->root();

        switch ($a_component) {
            case "Modules/Course":
            case "Modules/Group":
                if ($a_event == "addParticipant" || $a_event == "deleteParticipant") {
                    $ref_ids = self::getCachedReferences($a_parameter['obj_id']);

                    foreach ($ref_ids as $ref_id) {
                        $logger->debug('MultiVc: ' . $a_event . ' for RefId = ' . $ref_id . ' and UserId = ' . $a_parameter['usr_id']);
                        //todo cache?
                        $xmvc_ref_ids = $DIC->repositoryTree()->getSubTree(
                            $DIC->repositoryTree()->getNodeData($ref_id),
                            false,
                            ['xmvc']
                        );
                        //                        $logger->dump($xmvc_ref_ids);
                        foreach ($xmvc_ref_ids as $xmvc_ref_id) {
                            $multiVcObj = new ilObjMultiVc($xmvc_ref_id);
                            if ($multiVcObj->getOnline()) {
                                $conn_id = $multiVcObj->getConnId();
                                $conn = new ilMultiVcConfig($conn_id);
                                $logger->debug('ref_id: ' . $xmvc_ref_id . '; Connection: ' . $conn_id . '; Content: ' . $conn->getShowContent());
                                if ($conn->getShowContent() == 'teams') {
                                    $upcomingMeeting = $multiVcObj->getScheduledMeetingsByDateFrom(date('Y-m-d H:i:s'), $xmvc_ref_id, 'UTC');
                                    if ($upcomingMeeting != null) {
                                        //$logger->dump($upcomingMeeting);
                                        ilApiTeams::changeParticipant($a_event, $multiVcObj, $conn, $upcomingMeeting, (int) $a_parameter['obj_id'], (int) $a_parameter['usr_id'], (int) $a_parameter['role_id']);
                                    } else {
                                        $logger->debug("no upcoming teams meeting");
                                    }


                                }
                            }
                        }

                        break;
                    }

                }

                break;
        }
    }
    private static function getCachedReferences(int $obj_id): array
    {
        global $DIC;
        if (!array_key_exists($obj_id, self::$ref_ids)) {
            self::$ref_ids[$obj_id] = ilObject::_getAllReferences($obj_id);
        }
        return self::$ref_ids[$obj_id];
    }

    protected function beforeActivation(): bool
    {
        ilMultiVcCron::installCronJob($this);

        return parent::beforeActivation(); // TODO: Change the autogenerated stub
    }

    //    protected function afterActivation():void
    //    {
    //        parent::afterActivation(); // TODO: Change the autogenerated stub
    //
    //    }

    protected function afterDeactivation(): void
    {
        ilMultiVcCron::uninstallCronJob($this);

        parent::afterDeactivation(); // TODO: Change the autogenerated stub
    }



}
